<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css"
        integrity="sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p" crossorigin="anonymous" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <style>
        body {
            scrollbar-width: none;
        }

        body::-webkit-scrollbar {
            width: 0;
        }

        .chatBody {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .verticalUsersBar {
            width: 20%;
            height: auto;
            background-color: #f5f5f5;
            overflow-y: auto;
            flex-grow: 1;
        }

        .usersBoxes {
            width: 100%;
            height: 75px;
            border: 2px solid rgba(0, 0, 0, 0.045);
            padding: 10px 10px;
            font-weight: bold;
            margin-bottom: 1px;
            white-space: nowrap;
        }

        .usersBoxes:hover {
            cursor: pointer;
            border: 2px solid rgba(0, 0, 0, 0.148);
            background-color: #f5f5f58e;

        }

        .userInfo {
            color: rgba(97, 77, 77, 0.723);
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
        }

        .pagination {
            width: 20%;
            height: 75px;
            background-color: #f5f5f58e;
        }

        .paginationText {
            font-weight: bold;
        }

        .pBar {
            font-weight: bold;
            margin: 0 10px;
        }

        .paginationText:hover {
            cursor: pointer;
            color: grey;
        }

        .secondChatBody {
            position: absolute;
            top: 0;
            right: 0;
            width: 80%;
            height: 100vh;
            overflow: hidden;
        }

        .topSideBar {
            width: 100%;
            height: 75px;
            background-color: #f5f5f58e;
            border: 2px solid rgba(0, 0, 0, 0.045);
            padding: 10px 30px;
        }

        .userIcon {
            border: 2px solid grey;
            border-radius: 15%;
            padding: 10px;
            color: grey;
            font-size: 24px;
        }

        .userIcon2 {
            border: 2px solid grey;
            border-radius: 50%;
            padding: 10px;
            color: grey;
            font-size: 24px;
        }

        .userIcon3 {
            border: 2px solid rgba(0, 0, 255, 0.668);
            border-radius: 50%;
            padding: 10px;
            color: rgba(0, 0, 255, 0.668);
            font-size: 24px;
        }

        .realTimeChat {
            width: 100%;
            height: calc(100vh - 75px);
            padding: 50px;
            align-items: center;
            overflow-y: auto;
        }

        .ask {
            width: 100%;
        }

        .response {
            width: 100%;
        }

        .chatBubble {
            max-width: 90%;
            padding: 10px;
            margin-left: 50px;
            border-radius: 20px;
            background-color: #f0f0f0;
            position: relative;
            white-space: normal;
            overflow-wrap: break-word;
        }

        .chatBubble2 {
            max-width: 90%;
            padding: 10px;
            margin-left: 50px;
            border-radius: 20px;
            background-color: #f0f0f0;
            position: relative;
            white-space: normal;
            overflow-wrap: break-word;
        }

        .chatBubble::after {
            content: "";
            position: absolute;
            top: 0;
            left: -10px;
            width: 0;
            height: 0;
            border: 10px solid;
            border-color: transparent #f0f0f0 transparent transparent;
        }

        .chatBubble2::after {
            content: "";
            position: absolute;
            top: 0;
            left: -10px;
            width: 0;
            height: 0;
            border: 10px solid;
            border-color: transparent #f0f0f0 transparent transparent;
        }

        .textMessage {
            font-weight: 500;
            width: 100%;
            word-break: break-word;
        }

        .topsideBarUserName {
            color: rgba(97, 77, 77, 0.723);
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
            font-weight: bold;
        }

        .us {
            font-weight: bold;
        }

        .newMessageContainer {
            position: absolute;
            bottom: 0;
            right: 0;
            width: 80%;
            height: 95px;
            background-color: #f5f5f5;
            border: 2px solid rgba(0, 0, 0, 0.045);
            padding: 10px 30px;
        }

        .messageSquare {
            width: 90%;
            height: 100%;
            background-color: white;
            border: 2px solid rgba(0, 0, 0, 0.129);
            padding: 10px 30px;
            border-radius: 10px;
        }

        .messageSquare:focus {
            outline: none;
            border-color: grey;
        }

        .sendBtn {
            border-radius: 5px;
            width: 110px;
            height: 60px;
            background-color: rgba(0, 0, 255, 0.668);
            border: 2px solid black;
            transition: background-color 0.3s ease;
        }

        .sendBtn:hover {
            background-color: rgba(0, 0, 255, 0.812);
        }

        #logoutButton {
            width: 100px;
            height: 40px;
            border-radius: 7px;
            background-color: rgba(0, 0, 255, 0.668);
            font-weight: 500;
        }

        #logoutButton:hover {
            background-color: rgba(0, 0, 255, 0.812);
            color: rgba(0, 0, 0, 0.657);
        }

        .date {
            font-size: 14px;
            color: rgba(0, 0, 0, 0.567);
            font-weight: 500;
            margin-left: -240px;
        }
    </style>
    <title>User Chat</title>
</head>

<body>
    <div class="bodyContainer d-flex flex-row justify-content-between">
        <div class="chatBody">
            <div class="verticalUsersBar d-flex flex-column">
                {{#each tickets}}
                <div class="usersBoxes" data-ticket-id="{{this._id}}">
                    <div>Chat ID: <span class="userInfo">{{this._id}}</span> </div>
                </div>
                {{/each}}
            </div>
        </div>
        <div class="secondChatBody">
            <div class="topSideBar d-flex align-items-center justify-content-between">
                <div class="d-flex align-items-center"><i class="fas fa-user userIcon"></i>
                    <p class="us m-0 ms-3">username: <span class="topsideBarUserName">{{username}}</span>
                    </p>
                </div>
                <div><button id="logoutButton">Logout</button></div>

            </div>

            <!-- Messages -->
            <div class="realtimeChat d-flex flex-column">
                {{#each tickets}}
                {{#each this.messages}}
                <div
                    class="{{#if this.isUser}}ask d-flex align-items-center justify-content-start{{else}}response d-flex align-items-center flex-row-reverse{{/if}} mb-5">
                    <div class="user{{#if this.isUser}}Ask{{else}}Response{{/if}} d-flex align-items-center">
                        <i class="fas fa-user userIcon{{#if this.isUser}}2{{else}}3{{/if}} ms-5"></i>
                    </div>
                    <div class="chatContainer d-flex">
                        <div class="chatBubble{{#if this.isAdmin}}2{{/if}} askBubble d-flex">
                            <p class="textMessage m-0 ms-1">{{this.text}}</p>
                        </div>
                    </div>
                    <p class="date m-0 ms-3">{{this.createdAt}}</p>
                </div>
                {{/each}}
                {{/each}}
            </div>
            <!-- Messages -->
        </div>
        <div class="newMessageContainer d-flex justify-content-between align-items-center">
            <input type="text" class="messageSquare">
            <button id="sendBtn" class="sendBtn">Send</button>
        </div>





        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4"
            crossorigin="anonymous"></script>


        <script src="/socket.io/socket.io.js"></script>
        {{!-- DOM --}}
        {{!-- logout Funct --}}
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                document.getElementById('logoutButton').addEventListener('click', function () {
                    var xhr = new XMLHttpRequest();
                    xhr.open('POST', '/logout', true);
                    xhr.onload = function () {
                        if (this.status == 200) {
                            window.location.href = '/login';
                        }
                    };
                    xhr.send();
                });
            });
        </script>
        {{!-- logout Funct --}}
        <script>
            const socket = io();
            let userId = "{{userId}}";
            const chatContainer = document.querySelector('.realtimeChat');

            document.getElementById('sendBtn').addEventListener('click', function () {
                const messageText = document.querySelector('.messageSquare').value;
                socket.emit('createTicket', { userId, message: messageText, role: 'user' });
                document.querySelector('.messageSquare').value = '';
            });

            socket.off('ticketCreated');
            socket.on('ticketCreated', function (data) {
                console.log('Ticket created:', data);

                if (Array.isArray(data.messages)) {
                    let lastMessage = data.messages[data.messages.length - 1];
                    data.message = lastMessage.text;
                    data.createdAt = lastMessage.createdAt;

                    // Create new message element
                    const newMessage = document.createElement('div');
                    newMessage.classList.add('ask', 'd-flex', 'align-items-center', 'justify-content-start', 'mb-5');

                    // Add user icon
                    const userDiv = document.createElement('div');
                    userDiv.classList.add('userAsk', 'd-flex', 'align-items-center');
                    const userIcon = document.createElement('i');
                    userIcon.classList.add('fas', 'fa-user', 'userIcon2', 'ms-5');
                    userDiv.appendChild(userIcon);
                    newMessage.appendChild(userDiv);

                    // Add message text
                    const chatContainerDiv = document.createElement('div');
                    chatContainerDiv.classList.add('chatContainer', 'd-flex');
                    const chatBubbleDiv = document.createElement('div');
                    chatBubbleDiv.classList.add('chatBubble', 'askBubble', 'd-flex');
                    const messageText = document.createElement('p');
                    messageText.classList.add('textMessage', 'm-0', 'ms-1');
                    messageText.textContent = lastMessage.text;
                    chatBubbleDiv.appendChild(messageText);
                    chatContainerDiv.appendChild(chatBubbleDiv);
                    newMessage.appendChild(chatContainerDiv);

                    // Add message date
                    const messageDate = document.createElement('p');
                    messageDate.classList.add('date', 'm-0', 'ms-3');
                    messageDate.textContent = lastMessage.createdAt;
                    newMessage.appendChild(messageDate);

                    // Append new message to chat
                    chatContainer.appendChild(newMessage);
                }
            });




            socket.on('adminMessageAdded', function (data) {
                console.log('Admin message added:', data);

                if (Array.isArray(data.messages)) {
                    let lastMessage = data.messages[data.messages.length - 1];
                    data.message = lastMessage.text;
                    data.createdAt = lastMessage.createdAt;

                    // Create new message element
                    const newMessage = document.createElement('div');
                    newMessage.classList.add('response', 'd-flex', 'align-items-center', 'flex-row-reverse', 'mb-5');

                    // Add user icon
                    const userDiv = document.createElement('div');
                    userDiv.classList.add('userResponse', 'd-flex', 'align-items-center');
                    const userIcon = document.createElement('i');
                    userIcon.classList.add('fas', 'fa-user', 'userIcon3', 'ms-5');
                    userDiv.appendChild(userIcon);
                    newMessage.appendChild(userDiv);

                    // Add message text
                    const chatContainerDiv = document.createElement('div');
                    chatContainerDiv.classList.add('chatContainer', 'd-flex');
                    const chatBubbleDiv = document.createElement('div');
                    chatBubbleDiv.classList.add('chatBubble2', 'askBubble', 'd-flex');
                    const messageText = document.createElement('p');
                    messageText.classList.add('textMessage', 'm-0', 'ms-1');
                    messageText.textContent = lastMessage.text;
                    chatBubbleDiv.appendChild(messageText);
                    chatContainerDiv.appendChild(chatBubbleDiv);
                    newMessage.appendChild(chatContainerDiv);

                    // Add message date
                    const messageDate = document.createElement('p');
                    messageDate.classList.add('date', 'm-0', 'ms-3');
                    messageDate.textContent = lastMessage.createdAt;
                    newMessage.appendChild(messageDate);

                    // Append new message to chat
                    chatContainer.appendChild(newMessage);
                }
            });
        </script>






















        </script>

        {{!-- filtering admin/subadmin msg --}}
        <script>tickets.forEach(ticket => {
                ticket.messages.forEach(message => {
                    message.isAdmin = (message.role === 'admin' || message.role === 'subAdmin');
                });
            });
        </script>
        {{!-- filtering admin/subadmin msg --}}
        {{!-- filtering users msg --}}

        <script>tickets.forEach(ticket => {
                ticket.messages.forEach(message => {
                    message.isUser = (message.role === 'user');
                });
            });

            // Pass the modified tickets to the Handlebars template
            var template = Handlebars.compile(document.getElementById('template').innerHTML);
            document.getElementById('target').innerHTML = template({ tickets: tickets });</script>
        {{!-- filtering users msg --}}
        {{!-- DOM --}}

</body>

</html>